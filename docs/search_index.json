[["index.html", "再現可能な日本語論文執筆入門:jpaRmdで実現する再現可能で低コストな日本語論文執筆のはじめの一歩 1 はじめに 1.1 連絡先 1.2 TWS概要", " 再現可能な日本語論文執筆入門:jpaRmdで実現する再現可能で低コストな日本語論文執筆のはじめの一歩 国里愛彦(専修大学)・小杉 考司(専修大学) 2021/9/6(月) 9:30-11:30 1 はじめに 本サイトは，日本心理学会第84回大会(以下，JPA2020)のチュートリアルワークショップ(以下，TWS)「再現可能な日本語論文執筆入門:jpaRmdで実現する再現可能で低コストな日本語論文執筆のはじめの一歩」の事前準備と当日(2021/9/6(月) 9:30-11:30)の演習用サイトになります。本サイトもRStudioとRMarkdown(Bookdown)を使って作成されています。左の目次をクリックして移動するか，＞をクリックして次のページに移動ください。 1.1 連絡先 本サイトの内容で不明な点がございましたら，メールフォームからご連絡をいただけましたら幸いです。 1.2 TWS概要 TWSの概要は以下になります。 再現可能性を高める上では，データから論文までをシームレスに接続して研究を行うことが推奨される。それによって，データの前処理から統計解析への移行時のミス，解析結果を論文内に記載する際のミスを防ぐことができ，研究の再現可能性を高めることができる。これを可能にするソフトウェアとしてR Markdownがあり，主要な学術雑誌のテンプレートが用意されている。国際誌の場合は既存のテンプレートを活用して論文執筆ができるが，国内誌の場合は日本語の処理や引用文献処理の問題もあり，適切なテンプレートが存在しない。そこで，我々は『心理学研究』などの国内誌に対応したjpaRmdパッケージを開発した。jpaRmdパッケージを使うことで，データの前処理，統計解析，論文執筆を１つのソフトウェア内でシームレスに扱うことができる。また，jpaRmdは投稿規定に沿った出力ができるので，フォーマット調整にかける労力を減らし，論文執筆に注力できる。本チュートリアルでは，各種ソフトウェアの導入からスタートし，再現性を高めるフォルダ構造の設定，そして実際にjpaRmdを使って論文執筆ができるようになることを目指す。 "],["02.html", "2 事前準備（Dockerとは） 2.1 解析環境の違うと結果が再現しない？ 2.2 Dockerでコードだけでなく解析環境の再現性も保つ 2.3 Rocker: RとRstudio用のDocker 2.4 統計解析でDockerを導入する利点", " 2 事前準備（Dockerとは） 2.1 解析環境の違うと結果が再現しない？ コンピュータが計算するものは正しそうに見えますが，Rを含む統計ソフトが返す結果がいつでも一致するとは限りません。例えば，コンピュータのOSの種類，統計解析ソフトのバージョン，Rの場合はパッケージのバージョンによって出力される結果は異なることがあります。最近は，データや解析コードの公開が進んできています。しかし，このような統計解析を実行する環境の違いが，再現性を低めている可能性もあります。 2.2 Dockerでコードだけでなく解析環境の再現性も保つ 解析環境の再現性のために，データやコードを公開・共有するだけでなく，解析環境やバージョン情報も公開する必要があります。ただ，なかなか公開するだけだと，論文作成時と同じ解析環境を作るのは難しかったりします。例えば，古いOSで動作するソフトじゃないと解析が再現できない場合，そのOSやソフトを用意するのは難しいかもしれません（実際，研究でつかわれたプログラムが公開されていたが，現在使われているOSでは動作せず，かといって古いOSを用意することも不可能なことがありました）。 OSとソフト（Rの場合はパッケージも）をまとめて配布できると解析環境の再現性が担保できるかもしれません。WindowsやMacの場合は難しいですが，Linux上で動作するようなソフトの場合は，OSとソフトを含んだものをまとめて（まとめたものをコンテナといいます），配布することもできます。このような，OSに依存せずに，Linuxベースのアプリケーションをコンテナ化する技術をDockerと呼びます。以下の図のように，Dockerを使うとOSとソフトをまとめたコンテナをイメージとして配布可能になります。配布が可能ということは，統計解析環境の共有も可能になります。そして，Docker Hub(https://hub.docker.com/ )では，多数のイメージが公開されています。ご自身の関心に合わせて，便利なDockerイメージをご利用いただけます。 2.3 Rocker: RとRstudio用のDocker 今回の場合は，OS(Ubuntsと呼ばれるLinux)とソフト（RとIDEのRStudio）とRパッケージをまとめたコンテナを使います。自作もできますが，結構大変ですので，既に公開されているものを使います。RやRstudio用のDockerコンテナをつくるRockerプロジェクト(https://hub.docker.com/u/rocker)1が公開したイメージが便利なので，今回のTWSでも使用します。 Rockerプロジェクトでも十分なのですが，よく使うパッケージなどは事前に入れられていると便利です。特にベイズ統計で用いるRstanなどはインストールがちょっと面倒なので，事前にそれらが入っていると便利かと思います（特にMarkdownでのPDF出力まわりやRStanなどが事前に入っていると便利です）。そこで，私は心理学で使いそうなRでパッケージを，RockerプロジェクトのVerseというコンテナにたくさん追加した自作Dockerイメージ(ykunisato/paper-r)を作って公開しています(https://hub.docker.com/u/ykunisato)。今回のTWSでは，私が作成したpaper-rというDockerイメージを使います。 2.4 統計解析でDockerを導入する利点 最後に，Dockerを導入する利点を以下に挙げておきます。 統計解析環境を再現可能にできる（使ったDockerイメージを配布すればいいだけ） 最初にDockerさえインストールできれば，あとはコマンド１つで，簡単に面倒なソフトのインストールなどが終わる プラウザで作業ができるので，今どきの仕事スタイルにあっている かっこいい (マニア向け)もしサーバー上にDockerを導入すれば，簡単に自分のサーバーでサービスを稼働できる（iPadからブラウザを通してRstudioが使える！）。 Nüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D., Daróczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp, S., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N., Shepherd, L., Sólymos, P., … Xiao, N. (2020). The Rockerverse: Packages and Applications for Containerisation with R. The R Journal, 12(1), 437.↩︎ "],["03.html", "3 事前準備(Windows編) 3.1 Windows10のエディションを確認する（ProかHomeか） 3.2 Windows10がProエディションの場合の導入方法 3.3 Windows10がHomeエディションの場合の導入方法 3.4 Dockerコマンド 3.5 Dockerが使えない場合", " 3 事前準備(Windows編) それでは，早速お手持ちのWindowsパソコンにDockerを導入しましょう（Macは次の「4 事前準備（Mac編）」をご覧ください）。なお， Dockerを使うにあたって，15GBくらいハードディスクに余裕があると良いかと思います。 3.1 Windows10のエディションを確認する（ProかHomeか） 多くの方が，Windows10をお使いだとは思いますが，一般的に使われるWindowsにはProとHomeの２つのエディションがあります。エディションによってDockerの導入方法が異なります。以下の解説動画で，ご自身のパソコンのWindowsがProかHomeのどちらかをご確認ください。 3.2 Windows10がProエディションの場合の導入方法 Windows10 Proエディションの方は以下の動画を参考にDockerを導入なさってください。なお，コマンドプロンプトに打ち込むコードについて，動画内で紹介しているものでも動きますが，以下で書いているコードのほうが楽だし上手くいくと思います。また，この動画は2020年10月に作成したものですが，この時はDocker Desktopのバージョンは2.4.0です。2021年8月の段階で最新のWindows updateを適用して，Docker Desktop 3.6.0をインストールして動作確認をしています。 コマンドプロンプトに打ち込むDocker用のコードは以下になります。以下のコードは動画内で口頭で解説しているものとは異なりますが，こちらのほうが簡単かつ上手くいくと思います！（-e DISABLE_AUTH=trueは便利ですが，複数アカウントがある場合は挙動がつかめないのでおすすめしないです））ローカルで，ご自身が所有しているパソコンでの利用を想定しているのでパスワードはpaperに固定しています（気になる場合は改変ください）。 docker run -e PASSWORD=paper -p 8787:8787 -v &quot;%cd%&quot;:/home/rstudio -d --name paper ykunisato/paper-r なお，Dockerではタグによる指定もできます，例えば，R4.1.0を指定したい場合は，以下のように最後に“:4.1.0”を追加すると指定できます（詳しくはpaper-rのページのTagを確認ください）。 docker run -e PASSWORD=paper -p 8787:8787 -v &quot;%cd%&quot;:/home/rstudio -d --name paper ykunisato/paper-r:4.1.0 終わったら，ブラウザのアドレスバーにlocalhost:8787と打ち込んで，出てきたログイン画面のUsernameにrstudio, Passwordにpaper(もしくはご自身で設定したパスワード)をいれてください。普段使っているホームディレクトリがマウントされていると思います。 3.3 Windows10がHomeエディションの場合の導入方法 Windows10 Homeエディションの方は以下の動画を参考にDockerを導入なさってください。なお，コマンドプロンプトに打ち込むコードについて，動画内で紹介しているものでも動きますが，以下で書いているコードのほうが楽だし上手くいくと思います。また，この動画は2020年10月に作成したものですが，この時はDocker Desktopのバージョンは2.4.0です。2021年8月の段階で最新のWindows updateを適用して，Docker Desktop 3.6.0をインストールして動作確認をしています。 コマンドプロンプトに打ち込むDocker用のコードは以下になります。以下のコードは動画内で口頭で解説しているものとは異なりますが，こちらのほうが簡単かつ上手くいくと思います！（-e DISABLE_AUTH=trueは便利ですが，複数アカウントがある場合は挙動がつかめないのでおすすめしないです））ローカルで，ご自身が所有しているパソコンでの利用を想定しているのでパスワードはpaperに固定しています（気になる場合は改変ください）。 docker run -e PASSWORD=paper -p 8787:8787 -v &quot;%cd%&quot;:/home/rstudio -d --name paper ykunisato/paper-r なお，Dockerではタグによる指定もできます，例えば，R4.1.0を指定したい場合は，以下のように最後に“:4.1.0”を追加すると指定できます（詳しくはpaper-rのページのTagを確認ください）。 docker run -e PASSWORD=paper -p 8787:8787 -v &quot;%cd%&quot;:/home/rstudio -d --name paper ykunisato/paper-r:4.1.0 終わったら，ブラウザのアドレスバーにlocalhost:8787と打ち込んで，出てきたログイン画面のUsernameにrstudio, Passwordにpaper(もしくはご自身で設定したパスワード)をいれてください。普段使っているホームディレクトリがマウントされていると思います。 3.4 Dockerコマンド 3.4.1 コンテナの確認と開始 コンテナの動作確認するには，コマンドプロンプトに以下を打ち込みます。STATUSがUpになっているとコンテナが動いています（再起動後に止まったりしていることがある）。 docker ps -a もしコンテナが停止している場合は(STATUSがExitedになっている)，コマンドプロンプトに以下を打ち込んで，コンテナを開始します。 docker start コンテナ名(上記の場合はpaper) 3.4.2 コンテナの停止と削除，イメージの削除 もうコンテナが不要になったら，停止して削除します。コンテナの停止には，コマンドプロンプトに以下を打ち込みます。 docker stop コンテナ名(上記の場合はpaper) コンテナの削除には，コマンドプロンプトに以下を打ち込みます。 docker rm コンテナ名(上記の場合はpaper) rmしてもコンテナが削除されただけでダウンロードしたイメージは残っています。まず，以下をコマンドプロンプトに打ち込んで，イメージの状況を確認します。削除したいイメージのIMAGE IDをコピーします。 docker images 上記でコピーしたIMAGE IDを使って，以下をコマンドプロンプトに打ち込んで，イメージを削除します。 docker rmi IMAGE_ID 3.5 Dockerが使えない場合 これまでの経験上，WindowsでDockerがうまくインストールできない場合，(1)マイクロソフトのSurfaceを利用している（インストールできる場合とできない場合がありました），(2)古いパソコンで買った時から様々な設定が積み重なっているなどがありました（個人的にはパソコンは過剰に個人的な設定をせず，定期的にクリーンインストールして使用するのが良いかと思います…) Dockerが使えないor使いたくない場合は，以下に進んでください。 https://ykunisato.github.io/jpa2021-tws-jpaRmd/05.html "],["04.html", "4 事前準備(Mac編) 4.1 MacへのDockerの導入方法 4.2 Dockerコマンド 4.3 Dockerが使えない場合", " 4 事前準備(Mac編) それでは，早速お手持ちのMacにDockerを導入しましょう（Windowsは前の3 事前準備(Windows編)をご覧ください）。なお， Dockerを使うにあたって，15GBくらいハードディスクに余裕があると良いかと思います。 4.1 MacへのDockerの導入方法 Macユーザーの方は，以下の動画を参考にDockerを導入ください。なお，M1 Mac(Apple Silicon)に関しては，2021年8月の段階でもRockerが利用できません2。つまり，Rockerをベースにした国里のPaper-rも動きません。M1 Mac(Apple Silicon)の利用者は，こちらで，DockerではなくRSutidoとRを直接的にインストールください。 ターミナルには以下のコマンドを入力します（適宜，PASSWORDやnameの=以降は，好みによって変更ください）。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -p 8787:8787 -v $PWD:/home/rstudio -d --name paper ykunisato/paper-r なお，Dockerではタグによる指定もできます，例えば，R4.1.0を指定したい場合は，以下のように最後に“:4.1.0”を追加すると指定できます（詳しくはpaper-rのページのTagを確認ください）。 docker run -e PASSWORD=paper -e DISABLE_AUTH=true -p 8787:8787 -v $PWD:/home/rstudio -d --name paper ykunisato/paper-r:4.1.0 普段使っているホームディレクトリがマウントされていると思います。 4.2 Dockerコマンド 4.2.1 コンテナの確認と開始 コンテナの動作確認するには，ターミナルに以下を打ち込みます。STATUSがUpになっているとコンテナが動いています（再起動後に止まったりしていることがある）。 docker ps -a もしコンテナが停止している場合は(STATUSがExitedになっている)，ターミナルに以下を打ち込んで，コンテナを開始します。 docker start コンテナ名(上記の場合はpaper) 4.2.2 コンテナの停止と削除，イメージの削除 もうコンテナが不要になったら，停止して削除します。コンテナの停止には，ターミナルに以下を打ち込みます。 docker stop コンテナ名(上記の場合はpaper) コンテナの削除には，ターミナルに以下を打ち込みます。 docker rm コンテナ名(上記の場合はpaper) rmしてもコンテナが削除されただけでダウンロードしたイメージは残っています。まず，以下をターミナルに打ち込んで，イメージの状況を確認します。削除したいイメージのIMAGE IDをコピーします。 docker images 上記でコピーしたIMAGE IDを使って，以下をターミナルに打ち込んで，イメージを削除します。 docker rmi IMAGE_ID 4.3 Dockerが使えない場合 Dockerが使えないor使いたくない場合は，以下に進んでください。 https://ykunisato.github.io/jpa2021-tws-jpaRmd/05.html Apple Silicon(M1 Mac)では，ARM64アーキテクチャーとなり，大きな変更がなされました。Apple側は従来のIntel x86_64のソフトが動くような工夫をしており，Dockerも現状では対応しています。しかし，2021年8月の段階では，ARM64でネイティブに動くRStudioがないのと（動作はしますが，ARM64用ではない），ARM64ベースのRパッケージの管理システムないので，現状ではまだちゃんと動くR用のDockerがありません（実は個人開発で動くものもあるのですが，一番シェアのあるRockerからのリリースを待つのが良いかと思います）。↩︎ "],["05.html", "5 事前準備(その他) 5.1 Dockerが使えない場合 5.2 文献管理ソフト 5.3 Githubアカウント", " 5 事前準備(その他) 5.1 Dockerが使えない場合 以下のソフトとパッケージをインストールください。 R(https://www.r-project.org/) Rstudio(https://rstudio.com/) 私が用意したDockerイメージ内には大量のRパッケージがはいっているので，それと同じものを用意するのは難しいかと思います。とりあえず，デモコードを実施した場合にインストールするか聞かれるので，その都度インストールください。 5.2 文献管理ソフト BibTeX形式で文献情報が出力できればなんでも良いのですが，最近は，以下の２つが便利かと思います。Zoteroの場合は，RStudioとの連携も良いのです（zotero connection）。今回は文献管理ソフトから出力されたbibtex形式ファイルを使うことを想定しています。 Paperpile Zotero 5.3 Githubアカウント Rstudioを使った再現可能性を高める取り組みにおいては，Githubを使うと便利です。詳しくは，RStudioでのGithub入門をご確認ください。 "],["06.html", "6 TWS: 再現可能な論文執筆と環境構築", " 6 TWS: 再現可能な論文執筆と環境構築 スライドは以下のリンクをクリックいただくブラウザの全画面で見ることができます。 https://ykunisato.github.io/ccp-lab-slide/jpa-tws-jpaRmd/06.html "],["07.html", "7 TWS: jpaRmdで日本語論文を書いてみよう！", " 7 TWS: jpaRmdで日本語論文を書いてみよう！ スライドは以下のリンクをクリックいただくブラウザの全画面で見ることができます。 https://ykunisato.github.io/ccp-lab-slide/jpa-tws-jpaRmd/07.html "],["08.html", "8 TWS: jpaRmdでらくらく文献処理！", " 8 TWS: jpaRmdでらくらく文献処理！ スライドは以下のリンクをクリックいただくブラウザの全画面で見ることができます。 https://kosugitti.github.io/slides/JPA2021_jpaRmdCitation/JPA_citation.html#1 "],["09.html", "9 TWS: jpaRmdの利用に関する発展的な話題", " 9 TWS: jpaRmdの利用に関する発展的な話題 スライドは以下のリンクをクリックいただくブラウザの全画面で見ることができます。 https://ykunisato.github.io/ccp-lab-slide/jpa-tws-jpaRmd/09.html "]]
